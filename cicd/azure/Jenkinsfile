pipeline {
    agent {
        docker {
            image 'node:18.0.0'
            args '-u root:root'
        }
    }

	environment {
		AZURE_TENANT_ID         = credentials('AZURE_TENANT_ID')
		AZURE_SUBSCRIPTION_ID   = credentials('azure_sub_id')
		AZURE_STORAGE_ACCOUNT   = "moviewfrontend"
		JOB_NAME                = '$web'
		RESOURCE_GROUP          = 'MoView-Frontend'
		PROFILE_NAME            = 'MoView-cdn-profile-uat'
		ENDPOINT_NAME           = 'moviewfrontend'
	}

	stages {
		stage('Install Azure CLI') {
			steps {
				sh 'apt-get update'
				sh 'apt install python3-pip -y'
				sh 'pip3 install azure-cli --upgrade'
			}
		}
		
		stage('Install packages') {
			steps {
				echo 'Installing packages ...'
				sh 'yarn install'
			}
		}

		stage('Build') {
			steps {
				echo 'Building the application ...'
				sh 'yarn run build'
			}
		}
		
		stage('upload file and purge') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'azuresp', 
								passwordVariable: 'AZURE_CLIENT_SECRET', 
								usernameVariable: 'AZURE_CLIENT_ID')]) {
					sh '''
					echo $container_name
					# Login to Azure with ServicePrincipal
					az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID
					# Set default subscription
					az account set --subscription $AZURE_SUBSCRIPTION_ID
					# Execute upload to Azure
					az storage blob upload-batch --destination ${JOB_NAME} --source ./build --account-name $AZURE_STORAGE_ACCOUNT --overwrite
					# Purge the endpoint
					az cdn endpoint purge --name $ENDPOINT_NAME --resource-group $RESOURCE_GROUP --profile-name $PROFILE_NAME --content-paths '/*'
					# Logout from Azure
					az logout
					'''
				}
			}
		}
	}

	post {
		always {
			cleanWs(cleanWhenNotBuilt: true,
				deleteDirs: true,
				disableDeferredWipeout: true,
				notFailBuild: true,
				patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
				[pattern: '.propsfile', type: 'EXCLUDE']]
			)}
		success {
			echo "WELL DONE!"
			bitbucketStatusNotify(buildState: 'SUCCESSFUL')
		}
		failure {
			echo "FAILED"
			bitbucketStatusNotify(buildState: 'FAILED')
		}
	}
}

